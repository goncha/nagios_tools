#!/usr/bin/env python

"""
This is script sent a normal mail notification to contact, but attach a graph which
grab from the graphite url to the mail.

Usage of this script in Nagios:

########### resource.cfg
# Graphite URL Prefix
$USER32$=http://localhost:8000/render


########### commands.cfg
# 'notify-service-graph-by-email' command definition
define command{
	command_name	notify-service-graph-by-email
	command_line 	/usr/bin/printf "%b" "***** Nagios *****\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\n\nDate/Time: $LONGDATETIME$\n\nAdditional Info:\n\n$SERVICEOUTPUT$\n" | /usr/local/nagios/bin/send_graph -g "$USER32$" -p "collectd-$HOSTNAME$" -t "$_SERVICEMETRICNAME$" -s "** $NOTIFICATIONTYPE$ Service Alert: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **" "$CONTACTEMAIL$"
	}


########### templates.cfg
define service{
        name                            load-longterm-service
        use                             local-service
        service_description             Load 15min
	register			0

	_METRICNAME			load.load.longterm
        }

"""


import logging
from logging.handlers import SysLogHandler

from email.mime.image import MIMEImage
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import smtplib

import os
import requests
import sys


## Use log message to SysLog
logger = logging.getLogger("sendgraph")
logger.setLevel(logging.INFO)
#logger.addHandler(logging.StreamHandler())
logger.addHandler(SysLogHandler(address='/dev/log'))


def send_graph_email(graph, subject, recipients, sender, body=None):
    """
    Builds an email with the attached graph.

    :param graph: Assumed to be a PNG, currently.
    :param subject: Email subject line
    :param recipients: list of email addresses to send to.
    :param body: Text portion of the alert notification email.
    :return:
    """
    if not sender:
       sender = 'nagios'

    logger.debug("body: %s  subject: %s  sender: %s  recipients: %s" % (body, subject, sender, recipients))
    if body is None:
        body = '\n'

    msg = MIMEMultipart()
    msg.attach(MIMEText(body))

    if graph:
        imgpart = MIMEImage(graph.content, _subtype='png')
        imgpart.add_header('Content-Disposition', 'attachment', filename='graph.png')
        msg.attach(imgpart)

    msg['to'] = ', '.join(recipients)
    msg['from'] = sender
    msg['subject'] = subject
    s = smtplib.SMTP()
    try:
        s.connect()
        s.sendmail(sender, recipients, msg.as_string())
        s.close()
    except Exception as out:
        logger.error("Sending mail failed: %s" % out)


def do_options():
    from optparse import OptionParser
    parser = OptionParser('Usage: %prog [options] recipients')
    parser.add_option('-G', '--graphite-url',
                      action='store',
                      dest='graphite_url',
                      help="URL to the graphite render service, including parameters and ignore --graphite and other options of parameters")
    parser.add_option('-g', '--graphite',
                      action='store',
                      dest='graphite',
                      help="URL to the graphite render service, excluding parameters")
    parser.add_option('-p', '--target-prefix',
                      action='store',
                      dest='prefix',
                      help="Common prefix for `--target' values")
    parser.add_option('-t', '--target',
                      action='append',
                      dest='targets',
                      help="Parameter of Graphite render service, `target', without value of `--target-prefix'")
    parser.add_option('-F', '--from-time',
                      action='store',
                      dest='fromtime',
                      default='-1hour',
                      help="Parameter of Graphite render service, `from'")
    parser.add_option('-W', '--width',
                      action='store',
                      dest='width',
                      default=600,
                      type='int',
                      help="Parameter of Graphite render service, `width'")
    parser.add_option('-H', '--height',
                      action='store',
                      dest='height',
                      default=400,
                      type='int',
                      help="Parameter of Graphite render service, `height'")
    parser.add_option('-s', '--subject',
                      action='store',
                      dest='subject',
                      help='Subject of mail')
    parser.add_option('-m', '--message',
                      action='store',
                      dest='message',
                      help='Message body of mail, read from STDIN if not provided')
    parser.add_option('-S', '--sender',
                      action='store',
                      dest='sender',
                      help='Sender of mail')

    return parser.parse_args()


def main():
    options, args = do_options()
    graphite_url = options.graphite_url
    subject = options.subject
    message = options.message
    sender = options.sender
    if not message or message == '-':
        message = sys.stdin.read()
    recipients = args

    if not graphite_url:
        # If there is no complete Graphite render service url (including parameters),
        # assemble here from other options.
        target_prefix = options.prefix
        # Filter value ($) of undefined Nagios macro
        targets = [x for x in options.targets if len(x) > 1]
        if target_prefix:
            targets = [target_prefix+'.'+x for x in targets]

        if targets:
            graphite_url = options.graphite + \
                ('?width=%s&height=%s&from=%s&' % (options.width, options.height, options.fromtime,)) + \
                '&'.join(['target='+x for x in targets])
        else:
            graphite_url = None

    logger.debug('Graphite url is %s' % graphite_url)

    graph = None
    if graphite_url:
        graph = requests.get(graphite_url)
        logger.debug("Response headers for graphite request: %s", graph.headers)
    else:
        logger.debug('No Graphite url, not grab a graph')

    send_graph_email(graph, subject, recipients, sender, message)


if __name__ == '__main__':
    main()


# Local Variables: **
# comment-column: 56 **
# indent-tabs-mode: nil **
# python-indent: 4 **
# End: **
