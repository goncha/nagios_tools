#!/usr/bin/env python

"""
This is script sent a normal mail notification to contact, but attach a graph which
grab from the graphite url to the mail.

Example of command defination in Nagios:

define command{
	command_name	notify-service-graph-by-email
	command_line 	/usr/bin/printf "%b" "***** Nagios *****\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\n\nDate/Time: $LONGDATETIME$\n\nAdditional Info:\n\n$SERVICEOUTPUT$\n" | /usr/local/nagios/bin/send_graph -u "http://localhost:8000/render?width=800&target=collectd-$HOSTNAME$.$_SERVICEMETRICNAME$&from=-1hour" -s "** $NOTIFICATIONTYPE$ Service Alert: $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **" "$CONTACTEMAIL$"
	}
"""


import logging
from logging.handlers import SysLogHandler

from email.mime.image import MIMEImage
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import smtplib

import os
import requests
import sys


## Use log message to SysLog
logger = logging.getLogger("sendgraph")
logger.setLevel(logging.INFO)
#logger.addHandler(logging.StreamHandler())
logger.addHandler(SysLogHandler(address='/dev/log'))


def send_graph_email(graph, subject, recipients, sender, body=None):
    """
    Builds an email with the attached graph.

    :param graph: Assumed to be a PNG, currently.
    :param subject: Email subject line
    :param recipients: list of email addresses to send to.
    :param body: Text portion of the alert notification email.
    :return:
    """
    if not sender:
       sender = 'nagios'

    logger.debug("body: %s  subject: %s  sender: %s  recipients: %s" % (body, subject, sender, recipients))
    if body is None:
        body = '\n'

    msg = MIMEMultipart()
    msg.attach(MIMEText(body))

    imgpart = MIMEImage(graph, _subtype='png')
    imgpart.add_header('Content-Disposition', 'attachment', filename='graph.png')
    msg.attach(imgpart)

    msg['to'] = ', '.join(recipients)
    msg['from'] = sender
    msg['subject'] = subject
    s = smtplib.SMTP()
    try:
        s.connect()
        s.sendmail(sender, recipients, msg.as_string())
        s.close()
    except Exception as out:
        logger.error("Sending mail failed: %s" % out)


def do_options():
    from optparse import OptionParser
    parser = OptionParser('Usage: %prog [options] recipients')
    parser.add_option('-u', '--url',
                      action='store',
                      dest='graph_url',
                      help="URL to the graphite graph that spawned the nagios alert")
    parser.add_option('-s', '--subject',
                      action='store',
                      dest='subject',
                      help='Subject of mail.')
    parser.add_option('-m', '--message',
                      action='store',
                      dest='message',
                      help='Message body of mail, read from STDIN if not provided')
    parser.add_option('-S', '--sender',
                      action='store',
                      dest='sender',
                      help='Sender of mail')

    return parser.parse_args()


def main():
    options, args = do_options()
    graph_url = options.graph_url
    subject = options.subject
    message = options.message
    sender = options.sender
    if not message or message == '-':
        message = sys.stdin.read()
    recipients = args

    logger.debug('graph url is %s' % graph_url)
    graph = requests.get(graph_url)
    logger.debug("Response headers for graph request: %s", graph.headers)

    send_graph_email(graph.content, subject, recipients, sender, message)


if __name__ == '__main__':
    main()


# Local Variables: **
# comment-column: 56 **
# indent-tabs-mode: nil **
# python-indent: 4 **
# End: **
